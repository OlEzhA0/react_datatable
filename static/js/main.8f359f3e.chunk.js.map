{"version":3,"sources":["components/THead.tsx","components/DataTable.tsx","helper/getData.js","components/Select.tsx","components/Buttons.tsx","helper/switchTitle.js","helper/filterPhones.js","helper/columnConfig.js","App.tsx","helper/debounce.js","index.js"],"names":["THead","_ref","columnConfig","selected","selectAllPhones","sortPhonesBy","react_default","a","createElement","Object","values","map","config","i","scope","key","title","className","cn","myTitle","isNotSelectAll","isSelectAll","tHead","onClick","sortType","DataTable","items","changeStatus","editCell","configs","keys","slice","_useState","useState","_useState2","slicedToArray","editingValue","setEditingValue","_useState3","_useState4","editingInputId","setEditingInputId","_useState5","_useState6","editingConfig","setEditingConfig","_useState7","_useState8","inputError","setInputError","validation","e","test","saveValue","reset","THead_THead","phone","id","type","checked","onChange","concat","htmlFor","editing","onDoubleClick","value","handleEditing","target","autoFocus","onKeyDown","onBlur","none","getPhones","asyncToGenerator","regenerator_default","mark","_callee","phonesData","preparedData","wrap","_context","prev","next","fetch","sent","json","data","objectSpread2","abrupt","stop","apply","this","arguments","Select","perPage","changePage","item","Buttons","page","nearbyPage","selectPage","buttons","Array","Math","ceil","length","fill","button","aria-label","href","aria-hidden","page-item active","page-item","switchTitle","param","filterPhones","searchValue","filteredPhones","valueForSearch","filter","isSearchable","searchKey","forEach","push","toLocaleLowerCase","includes","name","age","snippet","App","phones","setPhones","query","setQuery","setPerPageValue","currentPage","setCurrentPage","_useState9","_useState10","selectAll","setSelectAllStatus","_useState11","_useState12","sortedMethod","setSortedMethod","useEffect","then","isCheckedAll","debounceWrapper","useCallback","f","delay","timerId","clearTimeout","_len","arg","_key","setTimeout","debounce","setSearchAndPageValue","sortedPhones","isSelected","every","mathcedPhones","slicedPhones","placeholder","Fragment","DataTable_DataTable","preparedPhones","selectFilteredPhones","some","preparedPhonesWithoutSearchValue","sortParam","sortTitle","sortBy","toConsumableArray","reverse","sort","b","comperator1","comperator2","localeCompare","configParam","newValues","defineProperty","Select_Select","newValue","Buttons_Buttons","preventDefault","path","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.8f359f3e.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\ninterface Props {\n  columnConfig: ColumnConf;\n  selected: boolean;\n  selectAllPhones: () => void;\n  sortPhonesBy: (sortParam: string, sortTitle: string) => void;\n}\n\nexport const THead: React.FC<Props> = ({\n  columnConfig,\n  selected,\n  selectAllPhones,\n  sortPhonesBy,\n}) => (\n  <thead>\n    <tr>\n      {Object.values(columnConfig).map((config, i) => (\n        <th\n          scope=\"col\"\n          key={config.title}\n          className={cn({\n            myTitle: i === 0,\n            isNotSelectAll: !selected && i === 0,\n            isSelectAll: selected && i === 0,\n            tHead: true,\n          })}\n          onClick={() => {\n            if (i === 0) {\n              selectAllPhones();\n            }\n\n            if (config.sortType) {\n              sortPhonesBy(config.sortType, config.title);\n            }\n          }}\n        >\n          {i === 0 ? (\n            <span className=\"titleSelect\">{config.title}</span>\n          ) : config.title}\n        </th>\n      ))}\n    </tr>\n  </thead>\n);\n","import React, { useState } from 'react';\nimport { THead } from './THead';\nimport cn from 'classnames';\n\ninterface Props {\n  columnConfig: ColumnConf;\n  items: Phone[];\n  selected: boolean;\n  changeStatus: (id: string) => void;\n  selectAllPhones: () => void;\n  sortPhonesBy: (sortParam: string, sortTitle: string) => void;\n  editCell: (id: string, value: string, configParam: string) => void;\n}\n\nexport const DataTable: React.FC<Props> = ({\n  columnConfig,\n  items,\n  selected,\n  changeStatus,\n  selectAllPhones,\n  sortPhonesBy,\n  editCell,\n}) => {\n  const configs = Object.keys(columnConfig).slice(1);\n  const [editingValue, setEditingValue] = useState('');\n  const [editingInputId, setEditingInputId] = useState('');\n  const [editingConfig, setEditingConfig] = useState('');\n  const [inputError, setInputError] = useState(false);\n\n  const handleEditing = (id: string, config: string, value: string | number | boolean) => {\n    setEditingInputId(id);\n    setEditingConfig(config);\n    setEditingValue(value as string);\n    setInputError(false);\n  }\n\n  const validation = (e: React.KeyboardEvent | null, config: string) => {\n    if (!e || e.key === 'Enter') {\n      if (!editingValue) {\n        setInputError(true);\n        return;\n      }\n\n      if (config === 'age') {\n        if (/\\D/g.test(editingValue)) {\n          setInputError(true);\n          return;\n        }\n      }\n\n      saveValue()\n    }\n\n    if (e && e.key === 'Escape') {\n      reset();\n    }\n  }\n\n  const saveValue = () => {\n    editCell(editingInputId, editingValue, editingConfig);\n    reset();\n  }\n\n  const reset = () => {\n    setEditingValue('');\n    setEditingInputId('');\n    setEditingConfig('');\n    setInputError(false);\n  }\n\n  return (\n    <table className=\"table table-dark\">\n      <THead\n        columnConfig={columnConfig}\n        selected={selected}\n        selectAllPhones={selectAllPhones}\n        sortPhonesBy={sortPhonesBy}\n      />\n      <tbody>\n        {items.map((phone: Phone) => (\n          <tr key={phone.id}>\n            <th scope=\"row\">\n              <input\n                type=\"checkbox\"\n                className=\"custom-checkbox\"\n                checked={phone.checked}\n                onChange={() => changeStatus(phone.id)}\n                id={`${phone.id}`}\n              />\n              <label htmlFor={`${phone.id}`} />\n            </th>\n            {configs.map(config => (\n              <td\n                className={cn(\n                  { editing: editingInputId === phone.id && config === editingConfig },\n                )}\n                onDoubleClick={() => handleEditing(phone.id, config, phone[config])}\n              >\n                <input\n                  type=\"text\"\n                  value={editingValue}\n                  className=\"input\"\n                  onChange={e => {\n                    setEditingValue(e.target.value)\n\n                    if (e.target.value) {\n                      setInputError(false);\n                    }\n                  }}\n                  autoFocus={true}\n                  onKeyDown={e => validation(e, config)}\n                  onBlur={() => validation(null, config)}\n                />\n                {inputError\n                  && editingInputId === phone.id\n                  && config === editingConfig\n                  && (\n                    <p className=\"error\">Please, write correctly {config}</p>\n                  )}\n                <p className={cn(\n                  { none: editingInputId === phone.id && config === editingConfig }\n                )}>{phone[config]}</p>\n              </td>\n            ))}\n          </tr>\n        ))}\n\n      </tbody>\n    </table>\n  );\n};\n","export const getPhones = async() => {\n  const phonesData = await fetch('./api/phones.json');\n  let preparedData = await phonesData.json();\n\n  preparedData = preparedData.map(data => ({\n    ...data,\n    checked: false,\n  }));\n\n  return preparedData;\n};\n","import React from 'react';\n\ninterface Props {\n  perPage: number;\n  changePage: (e: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nexport const Select: React.FC<Props> = ({ perPage, changePage }) => {\n  const param = [5, 10, 15, 20];\n\n  return (\n    <select\n      className=\"custom-select mySelect\"\n      value={perPage}\n      onChange={changePage}\n    >\n      {param.map(item => (\n        <option\n          value={item}\n          key={item}\n        >\n          {item}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\ninterface Props {\n  page: number;\n  nearbyPage: (e: React.MouseEvent, path: number) => void;\n  selectPage: (e: React.MouseEvent, page: number) => void;\n  items: Phone[];\n  perPage: number;\n}\n\nexport const Buttons: React.FC<Props> = ({ page, nearbyPage, selectPage, items, perPage }) => {\n  const buttons = new Array(Math.ceil(items.length / perPage))\n    .fill(0)\n    .map((button, i) => i + 1);\n\n  return (\n    <nav aria-label=\"Page navigation example\">\n      <ul className=\"pagination\">\n        <li className=\"page-item\">\n          <a\n            className=\"page-link\"\n            href=\"/\"\n            aria-label=\"Previous\"\n            onClick={e => nearbyPage(e, -1)}\n          >\n            <span aria-hidden=\"true\">&laquo;</span>\n          </a>\n        </li>\n        {buttons.map(button => (\n          <li\n            className={cn({\n              'page-item active': button === page,\n              'page-item': button !== page,\n            })}\n            key={button}\n          >\n            <a\n              className=\"page-link\"\n              href=\"/\"\n              onClick={e => selectPage(e, button)}\n            >\n              {button}\n            </a>\n          </li>\n        ))}\n        <li className=\"page-item\">\n          <a\n            className=\"page-link\"\n            href=\"/\"\n            aria-label=\"Next\"\n            onClick={e => nearbyPage(e, 1)}\n          >\n            <span aria-hidden=\"true\">&raquo;</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n","export const switchTitle = (param) => {\n  switch (param) {\n    case 'Название':\n      return 'name';\n\n    case 'Возраст':\n      return 'age';\n\n    case 'Описание':\n      return 'snippet';\n\n    default:\n      return 'age';\n  }\n};\n","import { switchTitle } from './switchTitle';\n\nexport const filterPhones = (columnConfig, items, searchValue) => {\n  if (!searchValue ) {\n    return items;\n  }\n\n  const valueForSearch = Object\n    .values(columnConfig)\n    .filter(config => config.isSearchable);\n\n  const searchKey = [];\n  let filteredPhones;\n\n  valueForSearch\n    .map(phone => phone.title)\n    .forEach(key => searchKey.push(switchTitle(key)));\n\n  searchKey.forEach((key) => {\n    filteredPhones = items.filter((phone) => {\n      if (phone[key]\n        .toLocaleLowerCase()\n        .includes(searchValue\n          .toLocaleLowerCase())) {\n        return true;\n      }\n    });\n  });\n\n  return filteredPhones;\n};\n","export const columnConfig = {\n  checked: {\n    title: '❯',\n  },\n  name: {\n    title: 'Название',\n    sortType: 'string',\n    isSearchable: true,\n  },\n  age: {\n    title: 'Возраст',\n    sortType: 'number',\n  },\n  snippet: {\n    title: 'Описание',\n    isSearchable: true,\n  },\n};\n","import React, { useState, useEffect, useCallback, ChangeEvent } from 'react';\nimport './app.css';\n\nimport { DataTable } from './components/DataTable';\nimport { getPhones } from './helper/getData';\nimport { Select } from \"./components/Select\";\nimport { Buttons } from './components/Buttons';\nimport { debounce } from './helper/debounce';\nimport { filterPhones } from './helper/filterPhones';\nimport { switchTitle } from './helper/switchTitle';\nimport { columnConfig } from './helper/columnConfig';\n\nexport const App = () => {\n  const [phones, setPhones] = useState<Phone[]>([]);\n  const [query, setQuery] = useState('');\n  const [perPage, setPerPageValue] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectAll, setSelectAllStatus] = useState(false);\n  const [sortedMethod, setSortedMethod] = useState('age');\n\n  useEffect(() => {\n    getPhones()\n      .then((phones) => {\n        setPhones(phones);\n      });\n\n  }, []);\n\n  useEffect(() => {\n    const filter = filterPhones(columnConfig, phones, query);\n\n    if (filter.length) {\n      isCheckedAll(filter);\n    } else {\n      isCheckedAll([]);\n    }\n  }, [phones]);\n\n  useEffect(() => {\n    let filter: Phone[] = phones;\n\n    if (query) {\n      filter = filterPhones(columnConfig, phones, query);\n    }\n\n    isCheckedAll(filter);\n  }, [query]);\n\n  const debounceWrapper = useCallback(\n    debounce((value: string) => setSearchAndPageValue(value), 1000),\n    []\n  );\n\n  const setSearchAndPageValue = (value: string) => {\n    setQuery(value);\n    setCurrentPage(1);\n  };\n\n  const changeSelectPage = (e: ChangeEvent<HTMLSelectElement>) => {\n    const newValue: number = +e.target.value;\n\n    setPerPageValue(newValue);\n    setCurrentPage(1);\n  };\n\n  const changeStatus = (id: string) => {\n    const preparedPhones: Phone[] = phones.map(phone => ({\n      ...phone,\n      checked: id === phone.id\n        ? !phone.checked\n        : phone.checked,\n    }));\n\n    setPhones(preparedPhones);\n  };\n\n  const startDebounce = (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    debounceWrapper(value);\n  };\n\n  const selectPage = (e: React.MouseEvent, page: number) => {\n    e.preventDefault();\n    setCurrentPage(page);\n  };\n\n  const nearbyPage = (e: React.MouseEvent, path: number) => {\n    e.preventDefault();\n\n    let filteredPhones = phones;\n\n    if (query) {\n      filteredPhones = filterPhones(columnConfig, phones, query);\n    }\n\n    if ((currentPage + path > Math.ceil(filteredPhones.length / perPage))\n      || (currentPage + path === 0)) {\n      return;\n    }\n\n    setCurrentPage(currentPage + path);\n  };\n\n  const isCheckedAll = (sortedPhones: Phone[]) => {\n    let isSelected = phones.every(phone => phone.checked);\n    if (!sortedPhones.length) {\n      if (isSelected) {\n        setSelectAllStatus(true);\n      } else {\n        setSelectAllStatus(false);\n      }\n    } else {\n      isSelected = sortedPhones.every((phone: Phone) => phone.checked);\n      if (isSelected) {\n        setSelectAllStatus(true);\n      } else {\n        setSelectAllStatus(false);\n      }\n    }\n  };\n\n  const selectAllPhones = () => {\n    const filteredPhones = filterPhones(columnConfig, phones, query);\n    const selectFilteredPhones = phones\n      .map(phone => ({\n        ...phone,\n        checked: filteredPhones\n          .some((filter: Phone) => filter.id === phone.id)\n          ? !selectAll\n          : phone.checked,\n      }));\n\n    if (query) {\n      setPhones(selectFilteredPhones);\n      setSelectAllStatus(!selectAll);\n    } else {\n      const preparedPhonesWithoutSearchValue = phones.map(phone => ({\n        ...phone,\n        checked: !selectAll,\n      }));\n\n      setPhones(preparedPhonesWithoutSearchValue);\n      setSelectAllStatus(!selectAll);\n    }\n  };\n\n  const sortPhonesBy = (sortParam: string, sortTitle: string) => {\n    const sortBy = switchTitle(sortTitle);\n    let sortedPhones = [];\n\n    if (sortBy === sortedMethod) {\n      sortedPhones = [...phones].reverse();\n      setPhones(sortedPhones);\n\n      return;\n    }\n\n    if (sortParam === 'string') {\n      sortedPhones = [...phones]\n        .sort((a: Phone, b: Phone): number => {\n          const comperator1 = a[sortBy];\n          const comperator2 = b[sortBy];\n\n          if (typeof comperator1 === 'string') {\n            return comperator1.localeCompare(comperator2 as string)\n          }\n\n          return 0\n        });\n\n      setPhones(sortedPhones);\n      setSortedMethod(sortBy);\n\n      return;\n    }\n\n    if (sortParam === 'number') {\n      sortedPhones = [...phones]\n        .sort((a: Phone, b: Phone): number => {\n          const comperator1 = a[sortBy];\n          const comperator2 = b[sortBy];\n\n          if (typeof comperator1 === 'number') {\n            return comperator1 - (comperator2 as number)\n          }\n\n          return 0\n        });\n\n      setPhones(sortedPhones);\n      setSortedMethod(sortBy);\n    }\n  };\n\n  const editCell = (id: string, value: string, configParam: string) => {\n    const newValues = phones.map(phone => ({\n      ...phone,\n      [configParam]: id === phone.id\n        ? value\n        : phone[configParam]\n    })).map(phone => ({\n      ...phone,\n      age: +phone.age,\n    }))\n\n    setPhones(newValues);\n    setSortedMethod('');\n  }\n\n  const mathcedPhones = filterPhones(columnConfig, phones, query)\n\n  const slicedPhones = mathcedPhones\n    .slice((currentPage - 1) * perPage, perPage * currentPage);\n\n  return (\n    <div className=\"App\">\n      <input\n        type=\"text\"\n        className=\"form-control myInput\"\n        placeholder=\"Write for search\"\n        onChange={startDebounce}\n      />\n      {mathcedPhones.length > 0 ? (\n        <>\n          <h3\n            className=\"myCount\"\n          >\n            from\n            {' '}\n            {\n              ((currentPage - 1) * perPage) + 1\n            }\n            {' '}\n            to\n            {' '}\n            {\n              (currentPage * perPage) > mathcedPhones.length\n                ? mathcedPhones.length\n                : currentPage * perPage\n            }\n            {' '}\n            of\n            {' '}\n            {mathcedPhones.length}\n          </h3>\n          <DataTable\n            items={slicedPhones}\n            columnConfig={columnConfig}\n            selected={selectAll}\n            changeStatus={changeStatus}\n            selectAllPhones={selectAllPhones}\n            sortPhonesBy={sortPhonesBy}\n            editCell={editCell}\n          />\n          <div className=\"myContainer\">\n            <Select\n              perPage={perPage}\n              changePage={changeSelectPage}\n            />\n            <Buttons\n              perPage={perPage}\n              items={mathcedPhones}\n              page={currentPage}\n              selectPage={selectPage}\n              nearbyPage={nearbyPage}\n            />\n          </div>\n        </>\n      ) : (\n          <p className=\"myErr\">Nothing matched the search</p>\n        )}\n\n    </div>\n  );\n};\n","export const debounce = (f, delay) => {\n  let timerId;\n\n  const timer = (...arg) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...arg);\n  };\n\n  return timer;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}